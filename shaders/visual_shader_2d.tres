[gd_resource type="VisualShader" load_steps=25 format=3 uid="uid://b7641qutff7s"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_qrh60"]
size = Vector2(600, 420)
expression = "for (int i = 0; i < iterations; i++) {
    uv = rotate((abs(uv) - subtract) * multiply, angle);
}

result = uv;"

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_oevtu"]
size = Vector2(600, 220)
expression = "vec2 rotate(vec2 uv, float angle) {
    return uv * mat2(
	    vec2(cos(angle), -sin(angle)),
		vec2(sin(angle), cos(angle))
	);
}"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_7icey"]
input_name = "time"

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_kmrd8"]
default_input_values = [0, 0.0, 1, 0.1]
operator = 2

[sub_resource type="VisualShaderNodeIntParameter" id="VisualShaderNodeIntParameter_iad1b"]
parameter_name = "iteratrions"
default_value_enabled = true
default_value = 10

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_5n2pb"]
parameter_name = "subtract"
default_value_enabled = true
default_value = 0.5

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_bj8ob"]
parameter_name = "multiply"
default_value_enabled = true
default_value = 1.2

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_qv1pf"]
parameter_name = "zoom"
hint = 1
min = 0.1
max = 5.0
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_8w542"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_ipha1"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0
operator = 3

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_qvo83"]
size = Vector2(600, 160)
expression = "vec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {
    return a + b * cos(2.0 * PI * (c * t + d));
}"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_scmlr"]
parameter_name = "color_a"
default_value_enabled = true
default_value = Color(0.5, 0.5, 0.5, 1)

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_w54eh"]
parameter_name = "color_b"
default_value_enabled = true
default_value = Color(0.5, 0.5, 0.5, 1)

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_4oic2"]
parameter_name = "color_c"
default_value_enabled = true
default_value = Color(1, 1, 0.5, 1)

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_r5ma8"]
parameter_name = "color_d"
default_value_enabled = true
default_value = Color(0.8, 0.9, 0.3, 1)

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_nkhw2"]
size = Vector2(600, 460)
expression = "vec3 p = palette(length(uv) + dot(uv, uv), color_a, color_b, color_c, color_d);
result = clamp(vec3(length(uv) * p), vec3(0.0), vec3(1.0));
float intensity = sin(t) * 0.25 - 0.2;
result = invert_color(result, intensity);"

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_tyb3x"]
size = Vector2(600, 160)
expression = "vec3 invert_color(vec3 color, float intensity) {
    return mix(color.rgb, 1.0 - color.rgb, intensity);
}"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_nle24"]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_y5ffj"]
constant = 0.5

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_ppedc"]
operator = 3

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_73q4u"]
expanded_output_ports = [0]
input_name = "screen_pixel_size"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_fdh0n"]
expanded_output_ports = [0]
input_name = "screen_pixel_size"

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_m88c5"]
default_input_values = [0, 0.0, 1, 1.0, 2, 0.0]
op_type = 0

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_p8221"]
default_input_values = [0, Vector2(0, 0), 1, Vector2(0, 0)]
op_type = 0
operator = 3

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform vec4 color_a : source_color = vec4(0.500000, 0.500000, 0.500000, 1.000000);
uniform vec4 color_b : source_color = vec4(0.500000, 0.500000, 0.500000, 1.000000);
uniform vec4 color_c : source_color = vec4(1.000000, 1.000000, 0.500000, 1.000000);
uniform vec4 color_d : source_color = vec4(0.800000, 0.900000, 0.300000, 1.000000);
uniform float zoom : hint_range(0.10000000149012, 5) = 1;
uniform int iteratrions = 10;
uniform float subtract = 0.5;
uniform float multiply = 1.20000004768372;


// GlobalExpression:0
	vec2 rotate(vec2 uv, float angle) {
	    return uv * mat2(
		    vec2(cos(angle), -sin(angle)),
			vec2(sin(angle), cos(angle))
		);
	}
// GlobalExpression:1
	vec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {
	    return a + b * cos(2.0 * PI * (c * t + d));
	}
// GlobalExpression:2
	vec3 invert_color(vec3 color, float intensity) {
	    return mix(color.rgb, 1.0 - color.rgb, intensity);
	}

void fragment() {
// ColorParameter:22
	vec4 n_out22p0 = color_a;


// ColorParameter:23
	vec4 n_out23p0 = color_b;


// ColorParameter:24
	vec4 n_out24p0 = color_c;


// ColorParameter:25
	vec4 n_out25p0 = color_d;


// Input:3
	vec2 n_out3p0 = SCREEN_UV;


// FloatConstant:4
	float n_out4p0 = 0.500000;


// VectorOp:2
	vec2 n_out2p0 = n_out3p0 - vec2(n_out4p0);


// Input:6
	vec2 n_out6p0 = SCREEN_PIXEL_SIZE;
	float n_out6p1 = n_out6p0.r;


// Input:7
	vec2 n_out7p0 = SCREEN_PIXEL_SIZE;
	float n_out7p2 = n_out7p0.g;


// FloatOp:5
	float n_out5p0 = n_out6p1 / n_out7p2;


// VectorCompose:8
	float n_in8p1 = 1.00000;
	vec2 n_out8p0 = vec2(n_out5p0, n_in8p1);


// VectorOp:9
	vec2 n_out9p0 = n_out2p0 / n_out8p0;


// FloatParameter:19
	float n_out19p0 = zoom;


// VectorOp:20
	vec2 n_out20p0 = n_out9p0 / vec2(n_out19p0);


// Input:14
	float n_out14p0 = TIME;


// FloatOp:15
	float n_in15p1 = 0.10000;
	float n_out15p0 = n_out14p0 * n_in15p1;


// IntParameter:16
	int n_out16p0 = iteratrions;


// FloatParameter:17
	float n_out17p0 = subtract;


// FloatParameter:18
	float n_out18p0 = multiply;


	vec2 n_out11p0;
// Expression:11
	n_out11p0 = vec2(0.0, 0.0);
	{
		for (int i = 0; i < n_out16p0; i++) {
		    n_out20p0 = rotate((abs(n_out20p0) - n_out17p0) * n_out18p0, n_out15p0);
		}
		
		n_out11p0 = n_out20p0;
	}


	vec3 n_out26p0;
// Expression:26
	n_out26p0 = vec3(0.0, 0.0, 0.0);
	{
		vec3 p = palette(length(n_out11p0) + dot(n_out11p0, n_out11p0), vec3(n_out22p0.xyz), vec3(n_out23p0.xyz), vec3(n_out24p0.xyz), vec3(n_out25p0.xyz));
		n_out26p0 = clamp(vec3(length(n_out11p0) * p), vec3(0.0), vec3(1.0));
		float intensity = sin(n_out15p0) * 0.25 - 0.2;
		n_out26p0 = invert_color(n_out26p0, intensity);
	}


// Output:0
	COLOR.rgb = n_out26p0;


}
"
graph_offset = Vector2(-2534, 0)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(-160, 200)
nodes/fragment/2/node = SubResource("VisualShaderNodeVectorOp_8w542")
nodes/fragment/2/position = Vector2(-2940, 600)
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_nle24")
nodes/fragment/3/position = Vector2(-3340, 880)
nodes/fragment/4/node = SubResource("VisualShaderNodeFloatConstant_y5ffj")
nodes/fragment/4/position = Vector2(-3340, 700)
nodes/fragment/5/node = SubResource("VisualShaderNodeFloatOp_ppedc")
nodes/fragment/5/position = Vector2(-2940, 360)
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_73q4u")
nodes/fragment/6/position = Vector2(-3340, 1980)
nodes/fragment/7/node = SubResource("VisualShaderNodeInput_fdh0n")
nodes/fragment/7/position = Vector2(-3340, 360)
nodes/fragment/8/node = SubResource("VisualShaderNodeVectorCompose_m88c5")
nodes/fragment/8/position = Vector2(-2680, 360)
nodes/fragment/9/node = SubResource("VisualShaderNodeVectorOp_p8221")
nodes/fragment/9/position = Vector2(-2420, 300)
nodes/fragment/11/node = SubResource("VisualShaderNodeExpression_qrh60")
nodes/fragment/11/position = Vector2(-1880, 320)
nodes/fragment/11/size = Vector2(600, 420)
nodes/fragment/11/input_ports = "0,3,uv;1,0,angle;2,1,iterations;3,0,subtract;4,0,multiply;"
nodes/fragment/11/output_ports = "0,3,result;"
nodes/fragment/11/expression = "for (int i = 0; i < iterations; i++) {
    uv = rotate((abs(uv) - subtract) * multiply, angle);
}

result = uv;"
nodes/fragment/12/node = SubResource("VisualShaderNodeGlobalExpression_oevtu")
nodes/fragment/12/position = Vector2(-700, 1780)
nodes/fragment/12/size = Vector2(600, 220)
nodes/fragment/12/input_ports = ""
nodes/fragment/12/output_ports = ""
nodes/fragment/12/expression = "vec2 rotate(vec2 uv, float angle) {
    return uv * mat2(
	    vec2(cos(angle), -sin(angle)),
		vec2(sin(angle), cos(angle))
	);
}"
nodes/fragment/14/node = SubResource("VisualShaderNodeInput_7icey")
nodes/fragment/14/position = Vector2(-3340, 2600)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatOp_kmrd8")
nodes/fragment/15/position = Vector2(-2940, 2560)
nodes/fragment/16/node = SubResource("VisualShaderNodeIntParameter_iad1b")
nodes/fragment/16/position = Vector2(-3340, 1060)
nodes/fragment/17/node = SubResource("VisualShaderNodeFloatParameter_5n2pb")
nodes/fragment/17/position = Vector2(-3340, 1360)
nodes/fragment/18/node = SubResource("VisualShaderNodeFloatParameter_bj8ob")
nodes/fragment/18/position = Vector2(-3340, 1680)
nodes/fragment/19/node = SubResource("VisualShaderNodeFloatParameter_qv1pf")
nodes/fragment/19/position = Vector2(-3340, 2220)
nodes/fragment/20/node = SubResource("VisualShaderNodeVectorOp_ipha1")
nodes/fragment/20/position = Vector2(-2160, 300)
nodes/fragment/21/node = SubResource("VisualShaderNodeGlobalExpression_qvo83")
nodes/fragment/21/position = Vector2(-700, 2040)
nodes/fragment/21/size = Vector2(600, 160)
nodes/fragment/21/input_ports = ""
nodes/fragment/21/output_ports = ""
nodes/fragment/21/expression = "vec3 palette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {
    return a + b * cos(2.0 * PI * (c * t + d));
}"
nodes/fragment/22/node = SubResource("VisualShaderNodeColorParameter_scmlr")
nodes/fragment/22/position = Vector2(-1620, 1300)
nodes/fragment/23/node = SubResource("VisualShaderNodeColorParameter_w54eh")
nodes/fragment/23/position = Vector2(-1620, 1600)
nodes/fragment/24/node = SubResource("VisualShaderNodeColorParameter_4oic2")
nodes/fragment/24/position = Vector2(-1620, 1900)
nodes/fragment/25/node = SubResource("VisualShaderNodeColorParameter_r5ma8")
nodes/fragment/25/position = Vector2(-1620, 2220)
nodes/fragment/26/node = SubResource("VisualShaderNodeExpression_nkhw2")
nodes/fragment/26/position = Vector2(-880, 160)
nodes/fragment/26/size = Vector2(600, 460)
nodes/fragment/26/input_ports = "0,4,color_a;1,4,color_b;2,4,color_c;3,4,color_d;4,3,uv;5,0,t;"
nodes/fragment/26/output_ports = "0,4,result;"
nodes/fragment/26/expression = "vec3 p = palette(length(uv) + dot(uv, uv), color_a, color_b, color_c, color_d);
result = clamp(vec3(length(uv) * p), vec3(0.0), vec3(1.0));
float intensity = sin(t) * 0.25 - 0.2;
result = invert_color(result, intensity);"
nodes/fragment/27/node = SubResource("VisualShaderNodeGlobalExpression_tyb3x")
nodes/fragment/27/position = Vector2(-700, 2240)
nodes/fragment/27/size = Vector2(600, 160)
nodes/fragment/27/input_ports = ""
nodes/fragment/27/output_ports = ""
nodes/fragment/27/expression = "vec3 invert_color(vec3 color, float intensity) {
    return mix(color.rgb, 1.0 - color.rgb, intensity);
}"
nodes/fragment/connections = PackedInt32Array(3, 0, 2, 0, 6, 1, 5, 0, 7, 2, 5, 1, 5, 0, 8, 0, 4, 0, 2, 1, 2, 0, 9, 0, 8, 0, 9, 1, 14, 0, 15, 0, 15, 0, 11, 1, 16, 0, 11, 2, 17, 0, 11, 3, 18, 0, 11, 4, 9, 0, 20, 0, 19, 0, 20, 1, 20, 0, 11, 0, 22, 0, 26, 0, 23, 0, 26, 1, 24, 0, 26, 2, 25, 0, 26, 3, 11, 0, 26, 4, 26, 0, 0, 0, 15, 0, 26, 5)
